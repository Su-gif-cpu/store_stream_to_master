-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_s_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_s_TVALID : IN STD_LOGIC;
    in_s_TREADY : OUT STD_LOGIC;
    in_s_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_s_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    mm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    mm_ce0 : OUT STD_LOGIC;
    mm_we0 : OUT STD_LOGIC;
    mm_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sz : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of dut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dut_dut,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.001000,HLS_SYN_LAT=544,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1202,HLS_SYN_LUT=800,HLS_VERSION=2024_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln22_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal nBlks_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_286 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln43_fu_163_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln43_reg_292 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_297 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln43_1_fu_182_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln43_1_reg_302 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln23_1_fu_186_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal sub_ln23_1_reg_307 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln43_fu_194_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln43_reg_312 : STD_LOGIC_VECTOR (5 downto 0);
    signal nBurst_fu_200_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal nBurst_reg_317 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln23_fu_205_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln23_reg_322 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln28_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_1_fu_214_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln28_1_reg_332 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln43_1_fu_221_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln43_1_reg_337 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal empty_17_fu_232_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal empty_17_reg_347 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_2_fu_238_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_reg_352 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln43_fu_253_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln43_reg_357 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_in_s_TREADY : STD_LOGIC;
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_residual_loop_fu_101_ap_start : STD_LOGIC;
    signal grp_dut_Pipeline_residual_loop_fu_101_ap_done : STD_LOGIC;
    signal grp_dut_Pipeline_residual_loop_fu_101_ap_idle : STD_LOGIC;
    signal grp_dut_Pipeline_residual_loop_fu_101_ap_ready : STD_LOGIC;
    signal grp_dut_Pipeline_residual_loop_fu_101_in_s_TREADY : STD_LOGIC;
    signal grp_dut_Pipeline_residual_loop_fu_101_mm_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dut_Pipeline_residual_loop_fu_101_mm_ce0 : STD_LOGIC;
    signal grp_dut_Pipeline_residual_loop_fu_101_mm_we0 : STD_LOGIC;
    signal grp_dut_Pipeline_residual_loop_fu_101_mm_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal trunc_ln28_fu_117_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_fu_191_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln43_1_fu_218_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal cnt_1_fu_246_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal regslice_both_in_s_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_s_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_s_TVALID_int_regslice : STD_LOGIC;
    signal in_s_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_s_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_s_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_s_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_s_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_s_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_s_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_s_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_s_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_s_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_s_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_s_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_s_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_s_V_last_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dut_dut_Pipeline_burst_loop_inner_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_s_TVALID : IN STD_LOGIC;
        zext_ln28 : IN STD_LOGIC_VECTOR (29 downto 0);
        in_s_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_s_TREADY : OUT STD_LOGIC;
        in_s_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in_s_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        mm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        mm_ce0 : OUT STD_LOGIC;
        mm_we0 : OUT STD_LOGIC;
        mm_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_dut_Pipeline_residual_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_s_TVALID : IN STD_LOGIC;
        select_ln43 : IN STD_LOGIC_VECTOR (8 downto 0);
        select_ln43_1 : IN STD_LOGIC_VECTOR (5 downto 0);
        in_s_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_s_TREADY : OUT STD_LOGIC;
        in_s_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        in_s_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        in_s_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        mm_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        mm_ce0 : OUT STD_LOGIC;
        mm_we0 : OUT STD_LOGIC;
        mm_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_add_32ns_32ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_sub_32ns_32ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dut_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_dut_Pipeline_burst_loop_inner_loop_fu_86 : component dut_dut_Pipeline_burst_loop_inner_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start,
        ap_done => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done,
        ap_idle => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_idle,
        ap_ready => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_ready,
        in_s_TVALID => in_s_TVALID_int_regslice,
        zext_ln28 => tmp_2_reg_352,
        in_s_TDATA => in_s_TDATA_int_regslice,
        in_s_TREADY => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_in_s_TREADY,
        in_s_TKEEP => in_s_TKEEP_int_regslice,
        in_s_TSTRB => in_s_TSTRB_int_regslice,
        in_s_TLAST => in_s_TLAST_int_regslice,
        mm_address0 => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_address0,
        mm_ce0 => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_ce0,
        mm_we0 => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_we0,
        mm_d0 => grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_d0);

    grp_dut_Pipeline_residual_loop_fu_101 : component dut_dut_Pipeline_residual_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dut_Pipeline_residual_loop_fu_101_ap_start,
        ap_done => grp_dut_Pipeline_residual_loop_fu_101_ap_done,
        ap_idle => grp_dut_Pipeline_residual_loop_fu_101_ap_idle,
        ap_ready => grp_dut_Pipeline_residual_loop_fu_101_ap_ready,
        in_s_TVALID => in_s_TVALID_int_regslice,
        select_ln43 => select_ln43_reg_357,
        select_ln43_1 => select_ln43_1_reg_337,
        in_s_TDATA => in_s_TDATA_int_regslice,
        in_s_TREADY => grp_dut_Pipeline_residual_loop_fu_101_in_s_TREADY,
        in_s_TKEEP => in_s_TKEEP_int_regslice,
        in_s_TSTRB => in_s_TSTRB_int_regslice,
        in_s_TLAST => in_s_TLAST_int_regslice,
        mm_address0 => grp_dut_Pipeline_residual_loop_fu_101_mm_address0,
        mm_ce0 => grp_dut_Pipeline_residual_loop_fu_101_mm_ce0,
        mm_we0 => grp_dut_Pipeline_residual_loop_fu_101_mm_we0,
        mm_d0 => grp_dut_Pipeline_residual_loop_fu_101_mm_d0);

    add_32ns_32ns_32_2_1_U20 : component dut_add_32ns_32ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln1_reg_265,
        din1 => grp_fu_140_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p2);

    sub_32ns_32ns_32_2_1_U21 : component dut_sub_32ns_32ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => nBlks_reg_275,
        ce => ap_const_logic_1,
        dout => grp_fu_167_p2);

    regslice_both_in_s_V_data_V_U : component dut_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_s_TDATA,
        vld_in => in_s_TVALID,
        ack_in => regslice_both_in_s_V_data_V_U_ack_in,
        data_out => in_s_TDATA_int_regslice,
        vld_out => in_s_TVALID_int_regslice,
        ack_out => in_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in_s_V_data_V_U_apdone_blk);

    regslice_both_in_s_V_keep_V_U : component dut_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_s_TKEEP,
        vld_in => in_s_TVALID,
        ack_in => regslice_both_in_s_V_keep_V_U_ack_in,
        data_out => in_s_TKEEP_int_regslice,
        vld_out => regslice_both_in_s_V_keep_V_U_vld_out,
        ack_out => in_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in_s_V_keep_V_U_apdone_blk);

    regslice_both_in_s_V_strb_V_U : component dut_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_s_TSTRB,
        vld_in => in_s_TVALID,
        ack_in => regslice_both_in_s_V_strb_V_U_ack_in,
        data_out => in_s_TSTRB_int_regslice,
        vld_out => regslice_both_in_s_V_strb_V_U_vld_out,
        ack_out => in_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in_s_V_strb_V_U_apdone_blk);

    regslice_both_in_s_V_last_V_U : component dut_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_s_TLAST,
        vld_in => in_s_TVALID,
        ack_in => regslice_both_in_s_V_last_V_U_ack_in,
        data_out => in_s_TLAST_int_regslice,
        vld_out => regslice_both_in_s_V_last_V_U_vld_out,
        ack_out => in_s_TREADY_int_regslice,
        apdone_blk => regslice_both_in_s_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dut_Pipeline_residual_loop_fu_101_ap_ready = ap_const_logic_1)) then 
                    grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                empty_17_reg_347 <= empty_17_fu_232_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                empty_reg_342 <= empty_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln22_reg_260 <= icmp_ln22_fu_121_p2;
                trunc_ln1_reg_265 <= sz(33 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                icmp_ln28_reg_327 <= icmp_ln28_fu_209_p2;
                nBurst_reg_317 <= nBurst_fu_200_p3;
                select_ln43_1_reg_337 <= select_ln43_1_fu_221_p3;
                trunc_ln23_reg_322 <= trunc_ln23_fu_205_p1;
                trunc_ln28_1_reg_332 <= trunc_ln28_1_fu_214_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                nBlks_reg_275 <= grp_fu_140_p2;
                tmp_1_reg_286 <= grp_fu_140_p2(31 downto 5);
                tmp_3_reg_280 <= grp_fu_140_p2(31 downto 31);
                trunc_ln43_reg_292 <= trunc_ln43_fu_163_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    select_ln43_reg_357(8 downto 5) <= select_ln43_fu_253_p3(8 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                sub_ln23_1_reg_307 <= sub_ln23_1_fu_186_p2;
                sub_ln43_reg_312 <= sub_ln43_fu_194_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    tmp_2_reg_352(29 downto 4) <= tmp_2_fu_238_p3(29 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_reg_297 <= grp_fu_167_p2(31 downto 5);
                trunc_ln43_1_reg_302 <= trunc_ln43_1_fu_182_p1;
            end if;
        end if;
    end process;
    tmp_2_reg_352(3 downto 0) <= "0000";
    select_ln43_reg_357(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state11, grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done, grp_dut_Pipeline_residual_loop_fu_101_ap_done, ap_CS_fsm_state13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_dut_Pipeline_residual_loop_fu_101_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done)
    begin
        if ((grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_dut_Pipeline_residual_loop_fu_101_ap_done)
    begin
        if ((grp_dut_Pipeline_residual_loop_fu_101_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_dut_Pipeline_residual_loop_fu_101_ap_done, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_dut_Pipeline_residual_loop_fu_101_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dut_Pipeline_residual_loop_fu_101_ap_done, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (grp_dut_Pipeline_residual_loop_fu_101_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    cnt_1_fu_246_p3 <= (trunc_ln28_1_reg_332 & ap_const_lv5_0);
    empty_17_fu_232_p3 <= 
        trunc_ln23_reg_322 when (empty_reg_342(0) = '1') else 
        ap_const_lv26_0;
    empty_fu_227_p2 <= "1" when (signed(nBurst_reg_317) > signed(ap_const_lv27_0)) else "0";
    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start <= grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg;
    grp_dut_Pipeline_residual_loop_fu_101_ap_start <= grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg;
    grp_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln22_reg_260),32));
    icmp_ln22_fu_121_p2 <= "0" when (trunc_ln28_fu_117_p1 = ap_const_lv2_0) else "1";
    icmp_ln28_fu_209_p2 <= "1" when (signed(tmp_1_reg_286) > signed(ap_const_lv27_0)) else "0";
    in_s_TREADY <= regslice_both_in_s_V_data_V_U_ack_in;

    in_s_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state11, grp_dut_Pipeline_burst_loop_inner_loop_fu_86_in_s_TREADY, grp_dut_Pipeline_residual_loop_fu_101_in_s_TREADY, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            in_s_TREADY_int_regslice <= grp_dut_Pipeline_residual_loop_fu_101_in_s_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_s_TREADY_int_regslice <= grp_dut_Pipeline_burst_loop_inner_loop_fu_86_in_s_TREADY;
        else 
            in_s_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    mm_address0_assign_proc : process(ap_CS_fsm_state11, grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_address0, grp_dut_Pipeline_residual_loop_fu_101_mm_address0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mm_address0 <= grp_dut_Pipeline_residual_loop_fu_101_mm_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mm_address0 <= grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_address0;
        else 
            mm_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    mm_ce0_assign_proc : process(ap_CS_fsm_state11, grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_ce0, grp_dut_Pipeline_residual_loop_fu_101_mm_ce0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mm_ce0 <= grp_dut_Pipeline_residual_loop_fu_101_mm_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mm_ce0 <= grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_ce0;
        else 
            mm_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mm_d0_assign_proc : process(ap_CS_fsm_state11, grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_d0, grp_dut_Pipeline_residual_loop_fu_101_mm_d0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mm_d0 <= grp_dut_Pipeline_residual_loop_fu_101_mm_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mm_d0 <= grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_d0;
        else 
            mm_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mm_we0_assign_proc : process(ap_CS_fsm_state11, grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_we0, grp_dut_Pipeline_residual_loop_fu_101_mm_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            mm_we0 <= grp_dut_Pipeline_residual_loop_fu_101_mm_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mm_we0 <= grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_we0;
        else 
            mm_we0 <= ap_const_logic_0;
        end if; 
    end process;

    nBurst_fu_200_p3 <= 
        sub_ln23_1_reg_307 when (tmp_3_reg_280(0) = '1') else 
        tmp_1_reg_286;
    select_ln43_1_fu_221_p3 <= 
        sub_ln43_reg_312 when (tmp_3_reg_280(0) = '1') else 
        zext_ln43_1_fu_218_p1;
    select_ln43_fu_253_p3 <= 
        cnt_1_fu_246_p3 when (icmp_ln28_reg_327(0) = '1') else 
        ap_const_lv9_0;
    sub_ln23_1_fu_186_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(tmp_reg_297));
    sub_ln43_fu_194_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(zext_ln43_fu_191_p1));
    tmp_2_fu_238_p3 <= (empty_17_reg_347 & ap_const_lv4_0);
    trunc_ln23_fu_205_p1 <= nBurst_fu_200_p3(26 - 1 downto 0);
    trunc_ln28_1_fu_214_p1 <= nBurst_fu_200_p3(4 - 1 downto 0);
    trunc_ln28_fu_117_p1 <= sz(2 - 1 downto 0);
    trunc_ln43_1_fu_182_p1 <= grp_fu_167_p2(5 - 1 downto 0);
    trunc_ln43_fu_163_p1 <= grp_fu_140_p2(5 - 1 downto 0);
    zext_ln43_1_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_reg_292),6));
    zext_ln43_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_1_reg_302),6));
end behav;
