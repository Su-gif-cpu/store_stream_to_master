// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dut_dut,hls_ip_2024_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=3.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.001000,HLS_SYN_LAT=544,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1202,HLS_SYN_LUT=800,HLS_VERSION=2024_2}" *)

module dut (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_s_TDATA,
        in_s_TVALID,
        in_s_TREADY,
        in_s_TKEEP,
        in_s_TSTRB,
        in_s_TLAST,
        mm_address0,
        mm_ce0,
        mm_we0,
        mm_d0,
        sz
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_s_TDATA;
input   in_s_TVALID;
output   in_s_TREADY;
input  [3:0] in_s_TKEEP;
input  [3:0] in_s_TSTRB;
input  [0:0] in_s_TLAST;
output  [8:0] mm_address0;
output   mm_ce0;
output   mm_we0;
output  [31:0] mm_d0;
input  [63:0] sz;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] mm_address0;
reg mm_ce0;
reg mm_we0;
reg[31:0] mm_d0;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln22_fu_121_p2;
reg   [0:0] icmp_ln22_reg_260;
reg   [31:0] trunc_ln1_reg_265;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] nBlks_reg_275;
wire    ap_CS_fsm_state3;
reg   [0:0] tmp_3_reg_280;
reg   [26:0] tmp_1_reg_286;
wire   [4:0] trunc_ln43_fu_163_p1;
reg   [4:0] trunc_ln43_reg_292;
reg   [26:0] tmp_reg_297;
wire    ap_CS_fsm_state5;
wire   [4:0] trunc_ln43_1_fu_182_p1;
reg   [4:0] trunc_ln43_1_reg_302;
wire   [26:0] sub_ln23_1_fu_186_p2;
reg   [26:0] sub_ln23_1_reg_307;
wire    ap_CS_fsm_state6;
wire   [5:0] sub_ln43_fu_194_p2;
reg   [5:0] sub_ln43_reg_312;
wire   [26:0] nBurst_fu_200_p3;
reg   [26:0] nBurst_reg_317;
wire    ap_CS_fsm_state7;
wire   [25:0] trunc_ln23_fu_205_p1;
reg   [25:0] trunc_ln23_reg_322;
wire   [0:0] icmp_ln28_fu_209_p2;
reg   [0:0] icmp_ln28_reg_327;
wire   [3:0] trunc_ln28_1_fu_214_p1;
reg   [3:0] trunc_ln28_1_reg_332;
wire   [5:0] select_ln43_1_fu_221_p3;
reg   [5:0] select_ln43_1_reg_337;
wire   [0:0] empty_fu_227_p2;
reg   [0:0] empty_reg_342;
wire    ap_CS_fsm_state8;
wire   [25:0] empty_17_fu_232_p3;
reg   [25:0] empty_17_reg_347;
wire    ap_CS_fsm_state9;
wire   [29:0] tmp_2_fu_238_p3;
reg   [29:0] tmp_2_reg_352;
wire    ap_CS_fsm_state10;
wire   [8:0] select_ln43_fu_253_p3;
reg   [8:0] select_ln43_reg_357;
wire    ap_CS_fsm_state11;
wire    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start;
wire    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done;
wire    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_idle;
wire    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_ready;
wire    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_in_s_TREADY;
wire   [8:0] grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_address0;
wire    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_ce0;
wire    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_we0;
wire   [31:0] grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_d0;
wire    grp_dut_Pipeline_residual_loop_fu_101_ap_start;
wire    grp_dut_Pipeline_residual_loop_fu_101_ap_done;
wire    grp_dut_Pipeline_residual_loop_fu_101_ap_idle;
wire    grp_dut_Pipeline_residual_loop_fu_101_ap_ready;
wire    grp_dut_Pipeline_residual_loop_fu_101_in_s_TREADY;
wire   [8:0] grp_dut_Pipeline_residual_loop_fu_101_mm_address0;
wire    grp_dut_Pipeline_residual_loop_fu_101_mm_ce0;
wire    grp_dut_Pipeline_residual_loop_fu_101_mm_we0;
wire   [31:0] grp_dut_Pipeline_residual_loop_fu_101_mm_d0;
reg    grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg;
reg    grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [1:0] trunc_ln28_fu_117_p1;
wire   [31:0] grp_fu_140_p1;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_167_p2;
wire   [5:0] zext_ln43_fu_191_p1;
wire   [5:0] zext_ln43_1_fu_218_p1;
wire   [8:0] cnt_1_fu_246_p3;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    regslice_both_in_s_V_data_V_U_apdone_blk;
wire   [31:0] in_s_TDATA_int_regslice;
wire    in_s_TVALID_int_regslice;
reg    in_s_TREADY_int_regslice;
wire    regslice_both_in_s_V_data_V_U_ack_in;
wire    regslice_both_in_s_V_keep_V_U_apdone_blk;
wire   [3:0] in_s_TKEEP_int_regslice;
wire    regslice_both_in_s_V_keep_V_U_vld_out;
wire    regslice_both_in_s_V_keep_V_U_ack_in;
wire    regslice_both_in_s_V_strb_V_U_apdone_blk;
wire   [3:0] in_s_TSTRB_int_regslice;
wire    regslice_both_in_s_V_strb_V_U_vld_out;
wire    regslice_both_in_s_V_strb_V_U_ack_in;
wire    regslice_both_in_s_V_last_V_U_apdone_blk;
wire   [0:0] in_s_TLAST_int_regslice;
wire    regslice_both_in_s_V_last_V_U_vld_out;
wire    regslice_both_in_s_V_last_V_U_ack_in;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg = 1'b0;
#0 grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg = 1'b0;
end

dut_dut_Pipeline_burst_loop_inner_loop grp_dut_Pipeline_burst_loop_inner_loop_fu_86(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start),
    .ap_done(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done),
    .ap_idle(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_idle),
    .ap_ready(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_ready),
    .in_s_TVALID(in_s_TVALID_int_regslice),
    .zext_ln28(tmp_2_reg_352),
    .in_s_TDATA(in_s_TDATA_int_regslice),
    .in_s_TREADY(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_in_s_TREADY),
    .in_s_TKEEP(in_s_TKEEP_int_regslice),
    .in_s_TSTRB(in_s_TSTRB_int_regslice),
    .in_s_TLAST(in_s_TLAST_int_regslice),
    .mm_address0(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_address0),
    .mm_ce0(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_ce0),
    .mm_we0(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_we0),
    .mm_d0(grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_d0)
);

dut_dut_Pipeline_residual_loop grp_dut_Pipeline_residual_loop_fu_101(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dut_Pipeline_residual_loop_fu_101_ap_start),
    .ap_done(grp_dut_Pipeline_residual_loop_fu_101_ap_done),
    .ap_idle(grp_dut_Pipeline_residual_loop_fu_101_ap_idle),
    .ap_ready(grp_dut_Pipeline_residual_loop_fu_101_ap_ready),
    .in_s_TVALID(in_s_TVALID_int_regslice),
    .select_ln43(select_ln43_reg_357),
    .select_ln43_1(select_ln43_1_reg_337),
    .in_s_TDATA(in_s_TDATA_int_regslice),
    .in_s_TREADY(grp_dut_Pipeline_residual_loop_fu_101_in_s_TREADY),
    .in_s_TKEEP(in_s_TKEEP_int_regslice),
    .in_s_TSTRB(in_s_TSTRB_int_regslice),
    .in_s_TLAST(in_s_TLAST_int_regslice),
    .mm_address0(grp_dut_Pipeline_residual_loop_fu_101_mm_address0),
    .mm_ce0(grp_dut_Pipeline_residual_loop_fu_101_mm_ce0),
    .mm_we0(grp_dut_Pipeline_residual_loop_fu_101_mm_we0),
    .mm_d0(grp_dut_Pipeline_residual_loop_fu_101_mm_d0)
);

dut_add_32ns_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32ns_32_2_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln1_reg_265),
    .din1(grp_fu_140_p1),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

dut_sub_32ns_32ns_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sub_32ns_32ns_32_2_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd0),
    .din1(nBlks_reg_275),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

dut_regslice_both #(
    .DataWidth( 32 ))
regslice_both_in_s_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TDATA),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_data_V_U_ack_in),
    .data_out(in_s_TDATA_int_regslice),
    .vld_out(in_s_TVALID_int_regslice),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_data_V_U_apdone_blk)
);

dut_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_s_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TKEEP),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_keep_V_U_ack_in),
    .data_out(in_s_TKEEP_int_regslice),
    .vld_out(regslice_both_in_s_V_keep_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_keep_V_U_apdone_blk)
);

dut_regslice_both #(
    .DataWidth( 4 ))
regslice_both_in_s_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TSTRB),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_strb_V_U_ack_in),
    .data_out(in_s_TSTRB_int_regslice),
    .vld_out(regslice_both_in_s_V_strb_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_strb_V_U_apdone_blk)
);

dut_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_s_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_s_TLAST),
    .vld_in(in_s_TVALID),
    .ack_in(regslice_both_in_s_V_last_V_U_ack_in),
    .data_out(in_s_TLAST_int_regslice),
    .vld_out(regslice_both_in_s_V_last_V_U_vld_out),
    .ack_out(in_s_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_s_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg <= 1'b1;
        end else if ((grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_ready == 1'b1)) begin
            grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg <= 1'b1;
        end else if ((grp_dut_Pipeline_residual_loop_fu_101_ap_ready == 1'b1)) begin
            grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        empty_17_reg_347 <= empty_17_fu_232_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        empty_reg_342 <= empty_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln22_reg_260 <= icmp_ln22_fu_121_p2;
        trunc_ln1_reg_265 <= {{sz[33:2]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        icmp_ln28_reg_327 <= icmp_ln28_fu_209_p2;
        nBurst_reg_317 <= nBurst_fu_200_p3;
        select_ln43_1_reg_337 <= select_ln43_1_fu_221_p3;
        trunc_ln23_reg_322 <= trunc_ln23_fu_205_p1;
        trunc_ln28_1_reg_332 <= trunc_ln28_1_fu_214_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        nBlks_reg_275 <= grp_fu_140_p2;
        tmp_1_reg_286 <= {{grp_fu_140_p2[31:5]}};
        tmp_3_reg_280 <= grp_fu_140_p2[32'd31];
        trunc_ln43_reg_292 <= trunc_ln43_fu_163_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        select_ln43_reg_357[8 : 5] <= select_ln43_fu_253_p3[8 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sub_ln23_1_reg_307 <= sub_ln23_1_fu_186_p2;
        sub_ln43_reg_312 <= sub_ln43_fu_194_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_2_reg_352[29 : 4] <= tmp_2_fu_238_p3[29 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_reg_297 <= {{grp_fu_167_p2[31:5]}};
        trunc_ln43_1_reg_302 <= trunc_ln43_1_fu_182_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_dut_Pipeline_residual_loop_fu_101_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_dut_Pipeline_residual_loop_fu_101_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_dut_Pipeline_residual_loop_fu_101_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        in_s_TREADY_int_regslice = grp_dut_Pipeline_residual_loop_fu_101_in_s_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        in_s_TREADY_int_regslice = grp_dut_Pipeline_burst_loop_inner_loop_fu_86_in_s_TREADY;
    end else begin
        in_s_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mm_address0 = grp_dut_Pipeline_residual_loop_fu_101_mm_address0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mm_address0 = grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_address0;
    end else begin
        mm_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mm_ce0 = grp_dut_Pipeline_residual_loop_fu_101_mm_ce0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mm_ce0 = grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_ce0;
    end else begin
        mm_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mm_d0 = grp_dut_Pipeline_residual_loop_fu_101_mm_d0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mm_d0 = grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_d0;
    end else begin
        mm_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mm_we0 = grp_dut_Pipeline_residual_loop_fu_101_mm_we0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        mm_we0 = grp_dut_Pipeline_burst_loop_inner_loop_fu_86_mm_we0;
    end else begin
        mm_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_dut_Pipeline_residual_loop_fu_101_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cnt_1_fu_246_p3 = {{trunc_ln28_1_reg_332}, {5'd0}};

assign empty_17_fu_232_p3 = ((empty_reg_342[0:0] == 1'b1) ? trunc_ln23_reg_322 : 26'd0);

assign empty_fu_227_p2 = (($signed(nBurst_reg_317) > $signed(27'd0)) ? 1'b1 : 1'b0);

assign grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start = grp_dut_Pipeline_burst_loop_inner_loop_fu_86_ap_start_reg;

assign grp_dut_Pipeline_residual_loop_fu_101_ap_start = grp_dut_Pipeline_residual_loop_fu_101_ap_start_reg;

assign grp_fu_140_p1 = icmp_ln22_reg_260;

assign icmp_ln22_fu_121_p2 = ((trunc_ln28_fu_117_p1 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_209_p2 = (($signed(tmp_1_reg_286) > $signed(27'd0)) ? 1'b1 : 1'b0);

assign in_s_TREADY = regslice_both_in_s_V_data_V_U_ack_in;

assign nBurst_fu_200_p3 = ((tmp_3_reg_280[0:0] == 1'b1) ? sub_ln23_1_reg_307 : tmp_1_reg_286);

assign select_ln43_1_fu_221_p3 = ((tmp_3_reg_280[0:0] == 1'b1) ? sub_ln43_reg_312 : zext_ln43_1_fu_218_p1);

assign select_ln43_fu_253_p3 = ((icmp_ln28_reg_327[0:0] == 1'b1) ? cnt_1_fu_246_p3 : 9'd0);

assign sub_ln23_1_fu_186_p2 = (27'd0 - tmp_reg_297);

assign sub_ln43_fu_194_p2 = (6'd0 - zext_ln43_fu_191_p1);

assign tmp_2_fu_238_p3 = {{empty_17_reg_347}, {4'd0}};

assign trunc_ln23_fu_205_p1 = nBurst_fu_200_p3[25:0];

assign trunc_ln28_1_fu_214_p1 = nBurst_fu_200_p3[3:0];

assign trunc_ln28_fu_117_p1 = sz[1:0];

assign trunc_ln43_1_fu_182_p1 = grp_fu_167_p2[4:0];

assign trunc_ln43_fu_163_p1 = grp_fu_140_p2[4:0];

assign zext_ln43_1_fu_218_p1 = trunc_ln43_reg_292;

assign zext_ln43_fu_191_p1 = trunc_ln43_1_reg_302;

always @ (posedge ap_clk) begin
    tmp_2_reg_352[3:0] <= 4'b0000;
    select_ln43_reg_357[4:0] <= 5'b00000;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "dut_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //dut

